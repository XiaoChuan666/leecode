
'''

动态规划。
1.原问题为求解长度为n的数组的最大子串和；子问题为求解长度为i的数组的最大子串和
2.dp[i]表示nums[0:i]中，以nums[i]结尾的最大子串和
3.边界值：dp[0] = nums[0]
4.状态转移方程：
    dp[i] = nums[i] + max(0,dp[i-1])

'''

class Solution(object):
    def maxSubArray(self, nums):
        if len(nums) == 1:
            return nums[0]
        dp = [0 for _ in range(len(nums))]
        dp[0] = nums[0]
        for i in range(1,len(nums)):
            if dp[i-1] > 0:
                dp[i] = nums[i] + dp[i-1]
            else:
                dp[i] = nums[i]
        for i in dp:
            if i > dp[0]:
                dp[0] = i
        return dp[0]
