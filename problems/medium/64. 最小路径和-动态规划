'''

dp:
1.原问题为到达grid右下角的最小开销，子问题为到达每个格子的最大开销
2.dp[i][j]表示到达grid[i][j]的最小开销
3.边界值：初始化左上角、第一排、第一列的值
4.状态转移方程：
    dp[i][j] = min(dp[i][j-1],dp[i-1][j]) + grid[i][j]

'''


class Solution(object):
    def minPathSum(self, grid):
        c = len(grid[0])
        r = len(grid)
        dp = [([0]*c) for _ in range(r)]
        dp[0][0] = grid[0][0]
        for i in range(1,r):
            dp[i][0] = dp[i-1][0] + grid[i][0]
        for i in range(1,c):
            dp[0][i] = dp[0][i-1] + grid[0][i]
        for i in range(1,r):
            for j in range(1,c):
                if dp[i-1][j] > dp[i][j-1]:
                    dp[i][j] = dp[i][j-1] + grid[i][j]
                else:
                    dp[i][j] = dp[i-1][j] + grid[i][j]
        return dp[r-1][c-1]
